{"ast":null,"code":"var _jsxFileName = \"/Users/elbardavid/Desktop/MachineLearning/puissance4/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState([]);\n  const [humainCoup, setHumainCoup] = useState([]);\n  const [iaCoup, setIaCoup] = useState([]);\n  const [turn, setTurn] = useState(0);\n  const rows = 6;\n  const columns = 7;\n  const humain = \"yellow\";\n  const ia = \"red\"; // const turn = \"humain\";\n\n  useEffect(() => {\n    let plateau = [];\n\n    for (let i = 0; i < rows; i++) {\n      plateau[i] = [];\n\n      for (let j = 0; j < columns; j++) {\n        plateau[i][j] = 0;\n      }\n    }\n\n    setBoard(plateau);\n  }, []);\n\n  const handleClick = e => {\n    let player;\n\n    if (turn % 2 === 0) {\n      console.log(\"PAIR ?\");\n      player = 1;\n    } else {\n      player = 2;\n    }\n\n    let row = parseFloat(e.row);\n    let column = parseFloat(e.column); // const buttonCheck = document.getElementById(`button${row}-${column}`);\n    // if (buttonCheck && (buttonCheck.style.backgroundColor === \"red\" || buttonCheck.style.backgroundColor === \"yellow\")) {\n    //   setTurn(prevState => prevState + 1)\n    // }\n\n    let getBoard = [...board]; // let rowLength = getBoard.length;\n\n    let rowLength = 5;\n    let columnLength = 6; // if (board[row][column] === 0) {\n    //   //\n    //   let rowFindCase = [];\n    //   //\n    //   for (let i = 0; i < getBoard.length; i++) {\n    //     rowFindCase = [...rowFindCase, getBoard[i][column]];\n    //   }\n    //   // Check nombre de lignes déjà remplies\n    //   let foundFullRow = getBoard.filter(\n    //     (e) =>\n    //       e[0] !== 0 &&\n    //       e[1] !== 0 &&\n    //       e[2] !== 0 &&\n    //       e[3] !== 0 &&\n    //       e[4] !== 0 &&\n    //       e[5] !== 0 &&\n    //       e[6] !== 0\n    //   );\n    //   switch (foundFullRow.length) {\n    //     case 0:\n    //       rowLength = 5;\n    //       break;\n    //     case 1:\n    //       rowLength = 4;\n    //       break;\n    //     case 2:\n    //       rowLength = 3;\n    //       break;\n    //     case 3:\n    //       rowLength = 2;\n    //       break;\n    //     case 4:\n    //       rowLength = 1;\n    //       break;\n    //     case 5:\n    //       rowLength = 0;\n    //       break;\n    //     default:\n    //       rowLength = 5;\n    //   }\n    //   for (let i = 0; i < rowLength; i++) {\n    //     for (let j = 0; j < columnLength; j++) {\n    //       // Last\n    //       if (getBoard[rowLength - i][j] === 0) {\n    //         //\n    //         if (rowFindCase.includes(1) || rowFindCase.includes(2)) {\n    //           let howMany1 = rowFindCase.filter((e) => e !== 0);\n    //           row = 5 - howMany1.length;\n    //           getBoard[row][column] = player === 1 ? 1 : 2;\n    //           break;\n    //         } else {\n    //           row = rowLength;\n    //           getBoard[rowLength][column] = player === 1 ? 1 : 2;\n    //           break;\n    //         }\n    //       }\n    //       // if (getBoard[row][column] !== 0) {\n    //       //   i = rowLength;\n    //       //   j = columnLength;\n    //       //   break;\n    //       // }\n    //     }\n    //   }\n\n    getBoard[row][column] = player === 1 ? 1 : 2;\n    setBoard(getBoard);\n    setTurn(prevState => prevState + 1);\n    const button = document.getElementById(`button${row}-${column}`);\n\n    if (button) {\n      if ((turn - 1) % 2 === 0) {\n        //pair\n        button.style.backgroundColor = \"yellow\";\n      } else {\n        // let rowIA = 3;\n        // let columnIA = 5;\n        // handleClick({row: rowIA, column: columnIA})\n        button.style.backgroundColor = \"red\";\n      }\n    }\n  };\n\n  useEffect(() => {\n    if ((turn - 1) % 2 !== 0) {\n      console.log(\"A MOI\");\n    } else {\n      let getBoard = [...board];\n\n      const getAllIndexes = (arr, val) => {\n        var indexes = [],\n            i;\n\n        for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n        return indexes;\n      };\n\n      let left;\n      let right;\n      let up; // currentRow;\n\n      let upRow;\n      let diagonalLT; // --------------------------------- Find NEXT MOVE --------------------------------- \\\\\n\n      function findNextMove() {\n        for (let x = 0; x < getBoard.length; x++) {\n          if (getBoard[x].includes(2)) {\n            let foundIndex = getAllIndexes(getBoard[x], 2);\n\n            for (let i = 0; i < foundIndex.length; i++) {\n              //LEFT\n              if (getBoard[x][foundIndex[i] - 1] === 0) {\n                left = foundIndex[i] - 1;\n                upRow = x;\n              } else if (getBoard[x][foundIndex[i] - 1] !== 0 && getBoard[x][foundIndex[i] - 2] === 0) {\n                left = foundIndex[i] - 2;\n                upRow = x; //RIGHT\n              } else if (getBoard[x][foundIndex[i] + 1] === 0) {\n                right = foundIndex[i] + 1;\n                upRow = x;\n              } else if (getBoard[x][foundIndex[i] + 1] !== 0 && getBoard[x][foundIndex[i] + 2] === 0) {\n                right = foundIndex[i] + 2;\n                upRow = x; //UP\n              } else if (getBoard[x - 1][i] === 0) {\n                up = getBoard[x - 1][i];\n                upRow = x - 1;\n              } else if (getBoard[x - 1][i] !== 0 && getBoard[x - 2][i] === 0) {\n                up = getBoard[x - 2][i];\n                upRow = x - 2;\n              } else if (getBoard[x - 1][i - 1] === 0) {\n                diagonalLT = getBoard[x - 1][i - 1];\n                upRow = x - 1;\n              }\n            }\n          }\n        }\n      }\n\n      findNextMove(); // --------------------------------- DONT LOOSE BRO --------------------------------- \\\\\n\n      let playerWin;\n\n      for (let x = 0; x < getBoard.length; x++) {\n        playerWin = getAllIndexes(getBoard[x], 1);\n\n        for (let y = 0; y < playerWin.length; y++) {\n          // Check Horizontal si 2 jetons d'affilés\n          if (getBoard[x][playerWin[y]] === getBoard[x][playerWin[y + 1]]) {\n            if (getBoard[x][playerWin[y - 1]] === 0) {\n              left = y - 1;\n              upRow = x;\n            }\n\n            if (getBoard[x][playerWin[y + 2]] === 0) {\n              right = y + 2;\n              upRow = x;\n            }\n          }\n\n          console.log(\"2 jeton d'affile \");\n        }\n      }\n\n      console.log(\"win\", playerWin); // ----------------------------------------------------------------------------------- \\\\\n\n      console.log(\"left\", left);\n      console.log(\"right\", right);\n      console.log(\"up\", up);\n      console.log(\"row\", upRow);\n      console.log(\"diagonal left top\", diagonalLT);\n\n      if (upRow) {\n        handleClick({\n          row: upRow,\n          column: left || right || up || diagonalLT\n        });\n      } else if (!left || !right || !up) {\n        handleClick({\n          row: 0,\n          column: 3\n        });\n      }\n    }\n  }, [turn, board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Tour : \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), board.length > 0 && board.map((e, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: e.map((f, j) => /*#__PURE__*/_jsxDEV(\"button\", {\n        id: `button${i}-${j}`,\n        style: {\n          width: \"70px\",\n          height: \"70px\"\n        },\n        value: i,\n        name: j,\n        onClick: e => handleClick({\n          row: e.target.value,\n          column: e.target.name\n        })\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 15\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ap0XzacKSRFQC0TLmVGQhc/yqeE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/elbardavid/Desktop/MachineLearning/puissance4/src/App.js"],"names":["useState","useEffect","App","board","setBoard","humainCoup","setHumainCoup","iaCoup","setIaCoup","turn","setTurn","rows","columns","humain","ia","plateau","i","j","handleClick","e","player","console","log","row","parseFloat","column","getBoard","rowLength","columnLength","prevState","button","document","getElementById","style","backgroundColor","getAllIndexes","arr","val","indexes","length","push","left","right","up","upRow","diagonalLT","findNextMove","x","includes","foundIndex","playerWin","y","map","display","f","width","height","target","value","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [board, setBoard] = useState([]);\n\n  const [humainCoup, setHumainCoup] = useState([]);\n  const [iaCoup, setIaCoup] = useState([]);\n\n  const [turn, setTurn] = useState(0);\n\n  const rows = 6;\n  const columns = 7;\n\n  const humain = \"yellow\";\n  const ia = \"red\";\n\n  // const turn = \"humain\";\n\n  useEffect(() => {\n    let plateau = [];\n\n    for (let i = 0; i < rows; i++) {\n      plateau[i] = [];\n      for (let j = 0; j < columns; j++) {\n        plateau[i][j] = 0;\n      }\n    }\n    setBoard(plateau);\n  }, []);\n\n  const handleClick = (e) => {\n    let player;\n\n    if (turn % 2 === 0) {\n      console.log(\"PAIR ?\");\n      player = 1;\n    } else {\n      player = 2;\n    }\n\n    let row = parseFloat(e.row);\n    let column = parseFloat(e.column);\n\n    // const buttonCheck = document.getElementById(`button${row}-${column}`);\n\n    // if (buttonCheck && (buttonCheck.style.backgroundColor === \"red\" || buttonCheck.style.backgroundColor === \"yellow\")) {\n    //   setTurn(prevState => prevState + 1)\n    // }\n\n    let getBoard = [...board];\n\n    // let rowLength = getBoard.length;\n    let rowLength = 5;\n    let columnLength = 6;\n\n    // if (board[row][column] === 0) {\n    //   //\n    //   let rowFindCase = [];\n    //   //\n    //   for (let i = 0; i < getBoard.length; i++) {\n    //     rowFindCase = [...rowFindCase, getBoard[i][column]];\n    //   }\n\n    //   // Check nombre de lignes déjà remplies\n    //   let foundFullRow = getBoard.filter(\n    //     (e) =>\n    //       e[0] !== 0 &&\n    //       e[1] !== 0 &&\n    //       e[2] !== 0 &&\n    //       e[3] !== 0 &&\n    //       e[4] !== 0 &&\n    //       e[5] !== 0 &&\n    //       e[6] !== 0\n    //   );\n\n    //   switch (foundFullRow.length) {\n    //     case 0:\n    //       rowLength = 5;\n    //       break;\n    //     case 1:\n    //       rowLength = 4;\n    //       break;\n    //     case 2:\n    //       rowLength = 3;\n    //       break;\n    //     case 3:\n    //       rowLength = 2;\n    //       break;\n    //     case 4:\n    //       rowLength = 1;\n    //       break;\n    //     case 5:\n    //       rowLength = 0;\n    //       break;\n    //     default:\n    //       rowLength = 5;\n    //   }\n\n    //   for (let i = 0; i < rowLength; i++) {\n    //     for (let j = 0; j < columnLength; j++) {\n    //       // Last\n    //       if (getBoard[rowLength - i][j] === 0) {\n    //         //\n    //         if (rowFindCase.includes(1) || rowFindCase.includes(2)) {\n    //           let howMany1 = rowFindCase.filter((e) => e !== 0);\n    //           row = 5 - howMany1.length;\n    //           getBoard[row][column] = player === 1 ? 1 : 2;\n    //           break;\n    //         } else {\n    //           row = rowLength;\n    //           getBoard[rowLength][column] = player === 1 ? 1 : 2;\n    //           break;\n    //         }\n    //       }\n\n    //       // if (getBoard[row][column] !== 0) {\n    //       //   i = rowLength;\n    //       //   j = columnLength;\n    //       //   break;\n    //       // }\n    //     }\n    //   }\n\n    getBoard[row][column] = player === 1 ? 1 : 2;\n\n      setBoard(getBoard);\n\n      setTurn((prevState) => prevState + 1);\n\n      const button = document.getElementById(`button${row}-${column}`);\n\n      if (button) {\n        if ((turn - 1) % 2 === 0) {\n          //pair\n          button.style.backgroundColor = \"yellow\";\n        } else {\n          // let rowIA = 3;\n          // let columnIA = 5;\n          // handleClick({row: rowIA, column: columnIA})\n          button.style.backgroundColor = \"red\";\n        }\n      \n    }\n  };\n\n  useEffect(() => {\n    if ((turn - 1) % 2 !== 0) {\n      console.log(\"A MOI\");\n    } else {\n      let getBoard = [...board];\n\n      const getAllIndexes = (arr, val) => {\n        var indexes = [],\n          i;\n        for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n        return indexes;\n      };\n\n      let left;\n      let right;\n      let up;\n\n      // currentRow;\n      let upRow;\n\n      let diagonalLT;\n\n      // --------------------------------- Find NEXT MOVE --------------------------------- \\\\\n\n      function findNextMove() {\n        for (let x = 0; x < getBoard.length; x++) {\n          if (getBoard[x].includes(2)) {\n            let foundIndex = getAllIndexes(getBoard[x], 2);\n\n            for (let i = 0; i < foundIndex.length; i++) {\n              //LEFT\n              if (getBoard[x][foundIndex[i] - 1] === 0) {\n                left = foundIndex[i] - 1;\n                upRow = x;\n              } else if (\n                getBoard[x][foundIndex[i] - 1] !== 0 &&\n                getBoard[x][foundIndex[i] - 2] === 0\n              ) {\n                left = foundIndex[i] - 2;\n                upRow = x;\n                //RIGHT\n              } else if (getBoard[x][foundIndex[i] + 1] === 0) {\n                right = foundIndex[i] + 1;\n                upRow = x;\n              } else if (\n                getBoard[x][foundIndex[i] + 1] !== 0 &&\n                getBoard[x][foundIndex[i] + 2] === 0\n              ) {\n                right = foundIndex[i] + 2;\n                upRow = x;\n                //UP\n              } else if (getBoard[x - 1][i] === 0) {\n                up = getBoard[x - 1][i];\n                upRow = x - 1;\n              } else if (getBoard[x - 1][i] !== 0 && getBoard[x - 2][i] === 0) {\n                up = getBoard[x - 2][i];\n                upRow = x - 2;\n              } else if (getBoard[x - 1][i - 1] === 0) {\n                diagonalLT = getBoard[x - 1][i - 1];\n                upRow = x - 1;\n              }\n            }\n          }\n        }\n      }\n\n      findNextMove();\n      \n\n      // --------------------------------- DONT LOOSE BRO --------------------------------- \\\\\n      let playerWin;\n      for (let x = 0; x < getBoard.length; x++) {\n        playerWin = getAllIndexes(getBoard[x], 1);\n        for (let y = 0; y < playerWin.length; y++) {\n          // Check Horizontal si 2 jetons d'affilés\n          if(getBoard[x][playerWin[y]] === getBoard[x][playerWin[y + 1]]){\n            if(getBoard[x][playerWin[y - 1]] === 0){\n              left = y - 1\n              upRow = x\n            }\n            if(getBoard[x][playerWin[y + 2]] === 0){\n              right = y + 2\n              upRow = x\n            }\n          }\n\n\n          console.log(\"2 jeton d'affile \")\n      }\n    }\n\n      console.log(\"win\", playerWin)\n\n      // ----------------------------------------------------------------------------------- \\\\\n\n      console.log(\"left\", left);\n      console.log(\"right\", right);\n      console.log(\"up\", up);\n      console.log(\"row\", upRow);\n      console.log(\"diagonal left top\", diagonalLT);\n\n      if (upRow) {\n        handleClick({ row: upRow, column: left || right || up || diagonalLT });\n      } else if (!left || !right || !up) {\n        handleClick({ row: 0, column: 3 });\n      }\n    }\n  }, [turn, board]);\n\n  return (\n    <div className=\"App\">\n      <h2>Tour : {turn}</h2>\n      <br />\n      {board.length > 0 &&\n        board.map((e, i) => (\n          <div key={i} style={{ display: \"flex\" }}>\n            {e.map((f, j) => (\n              <button\n                id={`button${i}-${j}`}\n                style={{\n                  width: \"70px\",\n                  height: \"70px\",\n                }}\n                key={j}\n                value={i}\n                name={j}\n                onClick={(e) =>\n                  handleClick({ row: e.target.value, column: e.target.name })\n                }\n              ></button>\n            ))}\n          </div>\n        ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}